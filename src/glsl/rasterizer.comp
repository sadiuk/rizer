#version 450 core

layout(local_size_x = 16, local_size_y = 16) in;

layout(std140, binding = 0) uniform RasterParams
{
	uvec2 texSize;
	uint vb_layout;
	vec4 color;
	vec3 clear_color;
} raster_params;

layout(binding = 0, rgba8) uniform image2D out_tex;
layout(binding = 1, std430) buffer VertexBuffer
{
	vec3 vertices[];
};
layout(binding = 2, std430) buffer IndexBuffer
{
	uvec3 indices[];
};
layout(binding = 3, std430) buffer DepthBuffer
{
	float depthBuffer[];
};

struct PointTriangleOrientation
{
	vec3 edge_function_results;
	vec3 barycentrics;
	float current_z;
};

void TestPointInTriangle(in vec3 p1, in vec3 p2, in vec3 p3, vec2 test_point, out PointTriangleOrientation results);
bool PerformDepthTest(uvec2 int_coord, float depth, bool updateDepthBuffer);

void main()
{
	if(all(lessThan(gl_GlobalInvocationID.xy, raster_params.texSize)))
	{
		vec2 texelCoord = (gl_GlobalInvocationID.xy / vec2(raster_params.texSize) - 0.5) * 2; 
		PointTriangleOrientation orientation;
		uint indices_count = indices.length();
		bool pixel_is_covered = false;
		vec4 out_color = vec4(raster_params.color);
		for(uint i = 0; i < indices_count; i++)
		{
			uvec3 triangle_indices = indices[i];
			vec3 p1 = vertices[triangle_indices[0]];
			vec3 p2 = vertices[triangle_indices[1]];
			vec3 p3 = vertices[triangle_indices[2]];
			TestPointInTriangle(p1, p2, p3, texelCoord, orientation);
			if(all(greaterThanEqual(orientation.edge_function_results, vec3(0, 0, 0))))
			{
				pixel_is_covered = true;
				bool passed = PerformDepthTest(gl_GlobalInvocationID.xy, orientation.current_z, true);
			}
		}
		if(!pixel_is_covered)
		{
			imageStore(out_tex, ivec2(gl_GlobalInvocationID.xy), vec4(raster_params.clear_color, 1));
		}
		else 
		{
			uint buffer_coord = gl_GlobalInvocationID.y * raster_params.texSize.x + gl_GlobalInvocationID.x;
			imageStore(out_tex, ivec2(gl_GlobalInvocationID.xy), vec4(abs(depthBuffer[buffer_coord])));
		}
	}
}

bool PerformDepthTest(uvec2 int_coord, float depth, bool update_depth_buffer)
{
	uint buffer_coord = int_coord.y * raster_params.texSize.x + int_coord.x;
	float current_depth = depthBuffer[buffer_coord];
	bool depth_test_passed = false;
	if(isnan(current_depth) || depth < current_depth)
	{
		depth_test_passed = true;
	}
	if(update_depth_buffer && depth_test_passed)
	{
		depthBuffer[buffer_coord] = depth;
	}
	return depth_test_passed;
}

float EdgeFunction(in vec2 p1, in vec2 p2, in vec2 test_point)
{
	return (test_point.x - p1.x) * (p2.y - p1.y) - (test_point.y - p1.y) * (p2.x - p1.x);
}

void TestPointInTriangle(in vec3 p1, in vec3 p2, in vec3 p3, vec2 test_point, out PointTriangleOrientation results)
{
	results.edge_function_results = vec3(EdgeFunction(p1.xy, p2.xy, test_point),
										 EdgeFunction(p2.xy, p3.xy, test_point),
										 EdgeFunction(p3.xy, p1.xy, test_point));
	vec3 triangle_area = vec3(EdgeFunction(p1.xy, p2.xy, p3.xy));
	results.barycentrics = abs(results.edge_function_results / triangle_area);
	vec3 b = results.barycentrics;
	results.current_z = 1. / (1 / p1.z * b[0] + 1 / p2.z * b[1] + 1 / p3.z * b[2]); 

}