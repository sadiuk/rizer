#version 460 core
#extension GL_ARB_shading_language_include : require

#include "/common.glsl"

#define LOCAL_SIZE_X 512
layout(local_size_x = LOCAL_SIZE_X, local_size_y = 1) in;

#define SHARED_MEMORY_BIT_SIZE BINS_IN_IMAGE.x * BINS_IN_IMAGE.y * LOCAL_SIZE_X
#define SHARED_MEMORY_INT_SIZE SHARED_MEMORY_BIT_SIZE / 32
#define SHARED_MEMORY_INVOCATION_STRIDE BINS_IN_IMAGE.x * BINS_IN_IMAGE.y / 32

shared uint binRasterizerTempOutput[SHARED_MEMORY_INT_SIZE];
shared uint prefixSum[LOCAL_SIZE_X * 2];
shared uint triangleSharedIndex;
shared uint binStartIndices[BINS_IN_IMAGE.x * BINS_IN_IMAGE.y];


void SetTriangleCoverageBit(uvec2 bin, uint triangleId, bool overlaps);
bool GetTriangleCoverageBit(uvec2 bin, uint triangleId);


layout(std430, binding = 0) readonly buffer TriangleData
{
	SetupTriangleData triangles[];
};

layout(std430, binding = 1) readonly buffer SnappedTriangleData
{
	SetupTriangleData snappedTriangles[];
};
// EACH BIN SIZE MUST BE THE SIZE OF TriangleData + SnappedTriangleData
layout(std430, binding = 2) buffer PerBinIndices
{
	uint perBinTriangleIndices[];
};

layout(binding = 3, offset = 4) uniform atomic_uint triangleCount;
layout(binding = 3, offset = 8) uniform atomic_uint snappedTriangleCount;
layout(binding = 3, offset = 12) uniform atomic_uint startedTriangleCounter;
layout(binding = 3, offset = 16) uniform atomic_uint processedTriangleCounter;
layout(binding = 3, offset = 24) uniform atomic_uint perBinTriangleCount[BINS_IN_IMAGE.x * BINS_IN_IMAGE.y];

//test
layout(binding = 4, rgba8) uniform image2D testTex;

void main()
{
	uint triangleIdx;
	if(gl_LocalInvocationID.x == 0)
	{
		triangleSharedIndex = 0;
	}
	barrier();
	memoryBarrierShared();
	while(triangleSharedIndex < triangles.length())
	{
		triangleIdx = triangleSharedIndex + gl_LocalInvocationID.x;
		// Clear the memory for the triangle
		for(uint y = 0; y < BINS_IN_IMAGE.y; ++y)
		{
			for(uint x = 0; x < BINS_IN_IMAGE.x; ++x)
			{
				SetTriangleCoverageBit(uvec2(x, y), triangleIdx, false);
			}
		}
		if(triangleIdx < atomicCounter(triangleCount))
		{
			SetupTriangleData triangle = triangles[triangleIdx];
			AABB2D aabb;
			GetTriangle2DAABB(triangle.screenPos, aabb);
			vec2 binSize = IMAGE_SIZE / BINS_IN_IMAGE;
			vec2 binSizeRelative = vec2(2.0, 2.0) / vec2(BINS_IN_IMAGE);
			uvec2 bottomLeftBin = uvec2(clamp(((aabb.minPos * 0.5) + 0.5) * BINS_IN_IMAGE, vec2(0), vec2(BINS_IN_IMAGE - 1)));
			uvec2 topRightBin = uvec2(clamp(((aabb.maxPos * 0.5) + 0.5) * BINS_IN_IMAGE, vec2(0), vec2(BINS_IN_IMAGE - 1)));
			uvec2 areaSize = topRightBin - bottomLeftBin + 1;

			//if((areaSize.x == 1 || areaSize.x == 2) && (areaSize.y == 1 || areaSize.y == 2))
			{
				for(uint y = bottomLeftBin.y; y <= topRightBin.y; ++y)
				{
					for(uint x = bottomLeftBin.x; x <= topRightBin.x; ++x)
					{
						SetTriangleCoverageBit(uvec2(x, y), triangleIdx, true);
					}
				}
			}
//			else
//			{
//				for(uint y = bottomLeftBin.y; y <= topRightBin.y; ++y)
//				{
//					for(uint x = bottomLeftBin.x; x <= topRightBin.x; ++x)
//					{
//						// triangle-bin test
//						vec2 binStart = (vec2(x, y) / vec2(BINS_IN_IMAGE) - 0.5) * 2;
//						vec2 binEnd = binStart + binSizeRelative;
//
//						bool binInsideTriangle = false, triangleInsideBin = false, triangleBinIntersect = false;
//
//						binInsideTriangle = PointInTriangle(binStart, triangle.screenPos[0].xy, triangle.screenPos[1].xy, triangle.screenPos[2].xy);
//						binInsideTriangle = binInsideTriangle || PointInTriangle(binStart + vec2(binSizeRelative.x, 0), triangle.screenPos[0].xy, triangle.screenPos[1].xy, triangle.screenPos[2].xy);
//						binInsideTriangle = binInsideTriangle || PointInTriangle(binStart + vec2(0, binSizeRelative.y), triangle.screenPos[0].xy, triangle.screenPos[1].xy, triangle.screenPos[2].xy);
//						binInsideTriangle = binInsideTriangle || PointInTriangle(binStart + binSizeRelative, triangle.screenPos[0].xy, triangle.screenPos[1].xy, triangle.screenPos[2].xy);
//						
//						
//						triangleInsideBin = all(greaterThanEqual(triangle.screenPos[0].xy, binStart)) && all(lessThanEqual(triangle.screenPos[0].xy, binEnd)); 
//						triangleInsideBin = triangleInsideBin || (all(greaterThanEqual(triangle.screenPos[1].xy, binStart)) && all(lessThanEqual(triangle.screenPos[1].xy, binEnd))); 
//						triangleInsideBin = triangleInsideBin || (all(greaterThanEqual(triangle.screenPos[2].xy, binStart)) && all(lessThanEqual(triangle.screenPos[2].xy, binEnd))); 
//							
//						triangleBinIntersect = SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[1].xy, binStart, binStart + vec2(binSizeRelative.x, 0));
//						triangleBinIntersect = triangleBinIntersect || SegmentsIntersect(triangle.screenPos[1].xy, triangle.screenPos[2].xy, binStart, binStart + vec2(binSizeRelative.x, 0));
//						triangleBinIntersect = triangleBinIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[2].xy, binStart, binStart + vec2(binSizeRelative.x, 0));
//						
//						triangleBinIntersect = triangleBinIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[1].xy, binStart + vec2(binSizeRelative.x, 0), binStart + binSizeRelative);
//						triangleBinIntersect = triangleBinIntersect || SegmentsIntersect(triangle.screenPos[1].xy, triangle.screenPos[2].xy, binStart + vec2(binSizeRelative.x, 0), binStart + binSizeRelative);
//						triangleBinIntersect = triangleBinIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[2].xy, binStart + vec2(binSizeRelative.x, 0), binStart + binSizeRelative);
//						
//						triangleBinIntersect = triangleBinIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[1].xy, binStart + binSizeRelative, binStart + vec2(0, binSizeRelative.y));
//						triangleBinIntersect = triangleBinIntersect || SegmentsIntersect(triangle.screenPos[1].xy, triangle.screenPos[2].xy, binStart + binSizeRelative, binStart + vec2(0, binSizeRelative.y));
//						triangleBinIntersect = triangleBinIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[2].xy, binStart + binSizeRelative, binStart + vec2(0, binSizeRelative.y));
//						
//						triangleBinIntersect = triangleBinIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[1].xy, binStart + vec2(0, binSizeRelative.y), binStart);
//						triangleBinIntersect = triangleBinIntersect || SegmentsIntersect(triangle.screenPos[1].xy, triangle.screenPos[2].xy, binStart + vec2(0, binSizeRelative.y), binStart);
//						triangleBinIntersect = triangleBinIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[2].xy, binStart + vec2(0, binSizeRelative.y), binStart);
//
//						SetTriangleCoverageBit(uvec2(x, y), triangleIdx, triangleBinIntersect || binInsideTriangle || triangleInsideBin);
//					}
//				}
//			}						
//			barrier();
//			memoryBarrierShared();
//
			// Per-bin prefix sums computation
			uint stages = uint(ceil(log2(min(LOCAL_SIZE_X, atomicCounter(triangleCount) - triangleSharedIndex)))); 
			for(uint y = 0; y < BINS_IN_IMAGE.y; ++y)
			{
				for(uint x = 0; x < BINS_IN_IMAGE.x; ++x)
				{
					prefixSum[gl_LocalInvocationID.x] = int(GetTriangleCoverageBit(uvec2(x, y), gl_LocalInvocationID.x));
					memoryBarrierShared();
					for(int stage = 0; stage < stages; stage++)
					{
						uint readOffset = (stage & 1) * LOCAL_SIZE_X; // half of the shared memory that we will read from
						uint writeOffset = (stage + 1 & 1) * LOCAL_SIZE_X; // half of the shared memory that we will write to
						uint stride = (1 << stage); 
						bool add = gl_LocalInvocationID.x % (stride << 1) >= stride;
						uint strideId = gl_LocalInvocationID.x % stride; // ID inside stride
						uint readIndex = readOffset + gl_LocalInvocationID.x - 1 - strideId;
						uint writeIndex = writeOffset + gl_LocalInvocationID.x;
						uint oldIndex = readOffset + gl_LocalInvocationID.x;

						if(add)
						{
							prefixSum[writeIndex] = prefixSum[readIndex] + prefixSum[oldIndex];
						}
						else
						{
							prefixSum[writeIndex] = prefixSum[oldIndex];
						}
						memoryBarrierShared();
					}
					uint trianglesInBatch = min(LOCAL_SIZE_X, atomicCounter(triangleCount) - triangleSharedIndex);
					uint binIndex = y * BINS_IN_IMAGE.x + x;
					uint readIndex = (stages & 1) * LOCAL_SIZE_X + gl_LocalInvocationID.x;
					uint outpIndex = prefixSum[readIndex];
					if(gl_LocalInvocationID.x == 0)
					{
						uint triCount = prefixSum[(stages & 1) * LOCAL_SIZE_X + trianglesInBatch - 1];
						binStartIndices[binIndex] = atomicCounterAdd(perBinTriangleCount[binIndex], triCount);
					}
					barrier();
					memoryBarrierShared();
					if(GetTriangleCoverageBit(uvec2(x, y), gl_LocalInvocationID.x))
					{
						uint triCount = atomicCounter(triangleCount) + atomicCounter(snappedTriangleCount);
						uint outputIndex = binIndex * triCount + binStartIndices[binIndex] + outpIndex - 1;
						perBinTriangleIndices[outputIndex] = triangleIdx;
					}
				}
			}

		}
		if(gl_LocalInvocationID.x == 0)
		{
			atomicCounterAdd(startedTriangleCounter, LOCAL_SIZE_X);
			triangleSharedIndex = atomicCounter(startedTriangleCounter);
		}
		barrier();
		memoryBarrierShared();

		//test
		if(gl_GlobalInvocationID.xy == uvec2(0, 0))
		for(uint y = 0; y < BINS_IN_IMAGE.y; ++y)
		for(uint x = 0; x < BINS_IN_IMAGE.x; ++x)
		{
			uint binIndex = y * BINS_IN_IMAGE.x + x;
			vec2 binSize = IMAGE_SIZE / BINS_IN_IMAGE;
			uvec2 binStart = uvec2(x, y) * uvec2(binSize);
			uvec2 binEnd = binStart + uvec2(binSize);

			if(atomicCounter(perBinTriangleCount[binIndex]) == 1)
				imageStore(testTex, ivec2(x, y), vec4(0, 1, 0, 1));
			else if(atomicCounter(perBinTriangleCount[binIndex]) == 2)
				imageStore(testTex, ivec2(x, y), vec4(0, 0.5, 0.5, 1));
			else if(atomicCounter(perBinTriangleCount[binIndex]) == 3)
				imageStore(testTex, ivec2(x, y), vec4(0, 0, 1, 1));
			else if(atomicCounter(perBinTriangleCount[binIndex]) > 0)
				imageStore(testTex, ivec2(x, y), vec4(1, 0, 0, 1));
		}
	}
}
void SetTriangleCoverageBit(uvec2 bin, uint triangleId, bool overlaps)
{
	triangleId %= LOCAL_SIZE_X;
	uint binIdx = BINS_IN_IMAGE.x * bin.y + bin.x;
	uint triStartIndex = triangleId * SHARED_MEMORY_INVOCATION_STRIDE;
	uint binOffset = binIdx / 32;
	uint bitOffset = binIdx % 32;

	uint old = binRasterizerTempOutput[triStartIndex + binOffset];
	binRasterizerTempOutput[triStartIndex + binOffset] ^= (-int(overlaps) ^ old) & (1 << bitOffset);
}

bool GetTriangleCoverageBit(uvec2 bin, uint triangleId)
{
	triangleId %= LOCAL_SIZE_X;
	uint binIdx = BINS_IN_IMAGE.x * bin.y + bin.x;
	uint triStartIndex = triangleId * SHARED_MEMORY_INVOCATION_STRIDE;
	uint binOffset = binIdx / 32;
	uint bitOffset = binIdx % 32;
	return bool(binRasterizerTempOutput[triStartIndex + binOffset] & (1 << bitOffset));
}
