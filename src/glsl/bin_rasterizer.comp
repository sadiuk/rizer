#version 460 core


#define LOCAL_SIZE_X 512
layout(local_size_x = LOCAL_SIZE_X, local_size_y = 1) in;

// TODO implement includes for glsl headers, must be done ASAP
struct SetupTriangleData
{
	vec4 screenPos[3];
};

struct AABB2D
{
	vec2 minPos, maxPos;
};

// TODO push constants instead of defines
#define BIN_COUNT uvec2(16, 16)
#define IMAGE_SIZE uvec2(1024, 1024)
#define SHARED_MEMORY_BIT_SIZE BIN_COUNT.x * BIN_COUNT.y * LOCAL_SIZE_X
#define SHARED_MEMORY_INT_SIZE SHARED_MEMORY_BIT_SIZE / 32
#define SHARED_MEMORY_BIN_STRIDE SHARED_MEMORY_INT_SIZE / (BIN_COUNT.x * BIN_COUNT.y)

shared uint binRasterizerTempOutput[SHARED_MEMORY_INT_SIZE];
shared uint prefixSum[LOCAL_SIZE_X * 2];
shared uint triangleSharedIndex;
shared uint binStartIndices[BIN_COUNT.x * BIN_COUNT.y];


void SetTriangleCoverageBit(uvec2 bin, uint triangleId, bool overlaps);
bool GetTriangleCoverageBit(uvec2 bin, uint triangleId);
void GetTriangle2DAABB(in vec4 screenPos[3], out AABB2D aabb);



layout(std430, binding = 0) readonly buffer TriangleData
{
	SetupTriangleData triangles[];
};

layout(std430, binding = 1) readonly buffer SnappedTriangleData
{
	SetupTriangleData snappedTriangles[];
};
// EACH BIN SIZE MUST BE THE SIZE OF TriangleData + SnappedTriangleData
layout(std430, binding = 2) writeonly buffer PerBinIndices
{
	uint perBinTriangleIndices[];
};

layout(binding = 3, offset = 4) uniform atomic_uint triangleCount;
layout(binding = 3, offset = 8) uniform atomic_uint snappedTriangleCount;
layout(binding = 3, offset = 12) uniform atomic_uint startedTriangleCounter;
layout(binding = 3, offset = 16) uniform atomic_uint processedTriangleCounter;
layout(binding = 3, offset = 20) uniform atomic_uint perBinTriangleCount[BIN_COUNT.x * BIN_COUNT.y];

//test
layout(binding = 4, rgba8) uniform image2D testTex;
void main()
{
	uint triangleIdx;
	if(gl_LocalInvocationID.x == 0)
	{
		triangleSharedIndex = 0;
	}
	barrier();
	memoryBarrierShared();
	while(triangleSharedIndex < triangles.length())
	{
		triangleIdx = triangleSharedIndex + gl_LocalInvocationID.x;
		if(triangleIdx < atomicCounter(triangleCount))
		{
			SetupTriangleData triangle = triangles[triangleIdx];
			AABB2D aabb;
			GetTriangle2DAABB(triangle.screenPos, aabb);
			vec2 binSize = IMAGE_SIZE / BIN_COUNT;
			uvec2 bottomLeftBin = uvec2(clamp(((aabb.minPos * 0.5) + 0.5) * BIN_COUNT - 1, vec2(0), vec2(BIN_COUNT - 1)));
			uvec2 topRightBin = uvec2(clamp(((aabb.maxPos * 0.5) + 0.5) * BIN_COUNT - 1, vec2(0), vec2(BIN_COUNT - 1)));
			uvec2 areaSize = uvec2(abs(topRightBin - bottomLeftBin));
			// Clear the memory for the triangle
			for(uint y = 0; y < BIN_COUNT.y; ++y)
			{
				for(uint x = 0; x < BIN_COUNT.x; ++x)
				{
					SetTriangleCoverageBit(uvec2(x, y), triangleIdx, false);
				}
			}

			if((areaSize.x == 1 || areaSize.x == 2) && (areaSize.y == 1 || areaSize.y == 2))
			{
				for(uint y = bottomLeftBin.y; y <= topRightBin.y; ++y)
				{
					for(uint x = bottomLeftBin.x; x <= topRightBin.x; ++x)
					{
						SetTriangleCoverageBit(uvec2(x, y), triangleIdx, true);
					}
				}
			}
			else
			{
				for(uint y = bottomLeftBin.y; y <= topRightBin.y; ++y)
				{
					for(uint x = bottomLeftBin.x; x <= topRightBin.x; ++x)
					{
						// triangle-bin test
						vec2 binStart = vec2(x, y) / binSize * 2 - 1;
						vec2 binEnd = binStart + 2 / binSize;
						vec2 binCenter = (binStart + binEnd) / 2;
						vec2 halfWidth = (binEnd - binStart) / 2;

						vec2 triCenter = (aabb.minPos + aabb.maxPos) / 2;
						vec2 triHalfWidth = (aabb.maxPos - aabb.minPos) / 2;

						bool overlaps = all(greaterThan(abs(binCenter - triCenter), halfWidth + triHalfWidth));

						SetTriangleCoverageBit(uvec2(x, y), triangleIdx, overlaps);
					}
				}
			}						
			barrier();
			memoryBarrierShared();

			// Per-bin prefix sums computation
			uint stages = uint(log2(gl_WorkGroupSize.x)); 
			for(uint y = 0; y < BIN_COUNT.y; ++y)
			{
				for(uint x = 0; x < BIN_COUNT.x; ++x)
				{
					prefixSum[gl_LocalInvocationID.x] = int(GetTriangleCoverageBit(uvec2(x, y), gl_LocalInvocationID.x));
					for(int stage = 0; stage < stages; stage++)
					{
						uint readOffset = (stage & 1) * LOCAL_SIZE_X; // half of the shared memory that we will read from
						uint writeOffset = (stage + 1 & 1) * LOCAL_SIZE_X; // half of the shared memory that we will write to
						uint stride = (1 << stage); 
						bool add = gl_LocalInvocationID.x % (stride << 1) >= stride;
						uint strideId = gl_LocalInvocationID.x % stride; // ID inside stride
						uint readIndex = readOffset + gl_LocalInvocationID.x - 1 - strideId;
						uint writeIndex = writeOffset + gl_LocalInvocationID.x;
						uint oldIndex = readOffset + gl_LocalInvocationID.x;

						if(add)
						{
							prefixSum[writeIndex] += prefixSum[readIndex] + prefixSum[oldIndex];
						}
						else
						{
							prefixSum[writeIndex] = prefixSum[oldIndex];
						}
						barrier();
						memoryBarrierShared();
					}
					uint binIndex = y * BIN_COUNT.x + x;
					uint readIndex = (stages & 1) * LOCAL_SIZE_X + gl_LocalInvocationID.x;
					uint outpIndex = prefixSum[readIndex];
					if(gl_LocalInvocationID.x == 0)
					{
						binStartIndices[binIndex] = atomicCounterAdd(perBinTriangleCount[binIndex], outpIndex);
					}
					barrier();
					memoryBarrierShared();
					if(GetTriangleCoverageBit(uvec2(x, y), gl_LocalInvocationID.x))
					{
						uint triCount = atomicCounter(triangleCount) + atomicCounter(snappedTriangleCount);
						uint outpIndex = binIndex * triCount + binStartIndices[binIndex] + outpIndex;
						perBinTriangleIndices[outpIndex] = triangleIdx;
						//test
						{
							uvec2 binStart = uvec2(x, y) * uvec2(binSize);
							uvec2 binEnd = binStart + uvec2(binSize);
							for(uint i = binStart.x; i < binEnd.x; i++)
							{
							for(uint j = binStart.y; j < binEnd.y; j++)
							{
								if(uvec2(x, y) == uvec2(1, 1))
								imageStore(testTex, ivec2(i, j), vec4(0, 1, 0, 1));
								else
								imageStore(testTex, ivec2(i, j), vec4(1, 1, 1, 1));
							}
							}
						}
					}
				}
			}

		}
		if(gl_LocalInvocationID.x == 0)
		{
			triangleSharedIndex = atomicCounterAdd(startedTriangleCounter, LOCAL_SIZE_X);
		}
		barrier();
		memoryBarrier();
		memoryBarrierShared();
	}
}

void GetTriangle2DAABB(in vec4 screenPos[3], out AABB2D aabb)
{
	vec4 minV = vec4(min(min(screenPos[0], screenPos[1]), screenPos[2]));
	vec4 maxV = vec4(max(max(screenPos[0], screenPos[1]), screenPos[2]));
	aabb.minPos = minV.xy;
	aabb.maxPos = maxV.xy;
}

void SetTriangleCoverageBit(uvec2 bin, uint triangleId, bool overlaps)
{
	uint binStartIndex = (BIN_COUNT.x * bin.y + bin.x) * SHARED_MEMORY_BIN_STRIDE;
	uint innerBinOffset = triangleId / 32;
	uint bitOffset = triangleId % 32;

	binRasterizerTempOutput[binStartIndex + innerBinOffset] ^= (-int(overlaps) ^ binRasterizerTempOutput[binStartIndex + innerBinOffset]) & (1 << bitOffset);
}

bool GetTriangleCoverageBit(uvec2 bin, uint triangleId)
{
	uint binStartIndex = (BIN_COUNT.x * bin.y + bin.x) * SHARED_MEMORY_BIN_STRIDE;
	uint innerBinOffset = triangleId / 32;
	uint bitOffset = triangleId % 32;

	return bool(binRasterizerTempOutput[binStartIndex + innerBinOffset] & (1 << bitOffset));
}