#version 460 core

#define LOCAL_SIZE_X 512
layout(local_size_x = LOCAL_SIZE_X) in;

#define BIN_COUNT uvec2(16, 16)
#define TILE_COUNT uvec2(8, 8)
#define TILE_COUNT_LINEAR TILE_COUNT.x * TILE_COUNT.y
#define IMAGE_SIZE uvec2(1024, 1024)
#define PIXELS_PER_BIN IMAGE_SIZE / BIN_COUNT
#define PIXELS_PER_TILE TILE_COUNT.x * TILE_COUNT.y / 32
#define TILES_IN_IMAGE uvec2(BIN_COUNT * TILE_COUNT)


#define COARSE_SHARED_MEMORY_INT_SIZE TILE_COUNT.x * TILE_COUNT.y * LOCAL_SIZE_X / 32
#define SHARED_MEMORY_INVOCATION_STRIDE COARSE_SHARED_MEMORY_INT_SIZE / (TILE_COUNT.x * TILE_COUNT.y)

// TODO implement includes for glsl headers, must be done ASAP
struct SetupTriangleData
{
	vec4 screenPos[3];
};

struct AABB2D
{
	vec2 minPos, maxPos;
};


layout(std430, binding = 0) readonly buffer TriangleData
{
	SetupTriangleData triangles[];
};

layout(std430, binding = 1) readonly buffer SnappedTriangleData
{
	SetupTriangleData snappedTriangles[];
};

layout(std430, binding = 2) buffer PerBinIndices
{
	uint perBinTriangleIndices[];
};
layout(binding = 3, offset = 4) uniform atomic_uint triangleCount;
layout(binding = 3, offset = 8) uniform atomic_uint snappedTriangleCount;
layout(binding = 3, offset = 12) uniform atomic_uint startedTriangleCounter;
layout(binding = 3, offset = 16) uniform atomic_uint processedTriangleCounter;
layout(binding = 3, offset = 20) uniform atomic_uint currentBinIndex;
layout(binding = 3, offset = 24) uniform atomic_uint perBinTriangleCount[BIN_COUNT.x * BIN_COUNT.y];

layout(binding = 4, rgba8) uniform image2D testTex;

layout(std430, binding = 5) buffer PerTileTriangleCount
{
	uint perTileTriangleCount[];
};
// A prefix sum of (the max triangle capacity for each bin) * (number of tiles in a bin)
layout(std430, binding = 6) buffer PerBinTriangleCountPrefixSum
{
	uint perBinTriangleCountPrefixSum[];
};

layout(std430, binding = 7) buffer PerTileIndices
{
	uint perTileTriangleIndices[];
};
shared uint currentBin;
shared uint currentBinTriangleCounter;
shared uint coarseRasterizerIntermadiatedData[COARSE_SHARED_MEMORY_INT_SIZE];
shared uint prefixSum[LOCAL_SIZE_X * 2];
shared uint tileStartIndices[TILE_COUNT_LINEAR];

const uint binCountLinear = BIN_COUNT.x * BIN_COUNT.y;

void SetTriangleCoverageBit(uvec2 tile, uint triangleId, bool overlaps);
bool GetTriangleCoverageBit(uvec2 tile, uint triangleId);
//TODO: Duplicate
void GetTriangle2DAABB(in vec4 screenPos[3], out AABB2D aabb);
bool PointInTriangle(vec2 point, vec2 v1, vec2 v2, vec2 v3);
bool SegmentsIntersect(vec2 s1, vec2 s2, vec2 p1, vec2 p2);

const vec2 binSize = IMAGE_SIZE / BIN_COUNT;
const vec2 binSizeRelative = vec2(2.0, 2.0) / vec2(BIN_COUNT);
const vec2 tileSizeRelative = binSizeRelative / TILE_COUNT;
uint debugFloat(float v)
{
	return uint(abs(v) * 100 + 100 * int(v > 0));
}
void main()
{
	uint triCount = atomicCounter(triangleCount) + atomicCounter(snappedTriangleCount);
	if(gl_LocalInvocationID.x == 0)
	{
		currentBin = atomicCounterIncrement(currentBinIndex);
	}
	barrier();
	memoryBarrierShared();
	while(currentBin < binCountLinear)
	{
		if(gl_LocalInvocationID.x < TILE_COUNT_LINEAR)
		{
			tileStartIndices[gl_LocalInvocationID.x] = 0;
		}
		uvec2 binIndex = uvec2(currentBin % BIN_COUNT.x, currentBin / BIN_COUNT.x);
		uint trianglesInBin = atomicCounter(perBinTriangleCount[currentBin]);

		vec2 binStart = (binIndex / vec2(BIN_COUNT) - 0.5) * 2;
		vec2 binEnd = binStart + binSizeRelative;	
		if(gl_LocalInvocationID.xy == uvec2(0, 0))
		{
			currentBinTriangleCounter = 0;
		}
		barrier();
		memoryBarrierShared();

		while(currentBinTriangleCounter < trianglesInBin)
		{
			uint indexOfTriangleIndex = currentBinTriangleCounter + gl_LocalInvocationID.x;
			if(indexOfTriangleIndex < trianglesInBin)
			{
				uint triangleIdx = perBinTriangleIndices[currentBin * triCount + indexOfTriangleIndex];
				SetupTriangleData triangle = triangles[triangleIdx];
				AABB2D aabb;
				GetTriangle2DAABB(triangle.screenPos, aabb);

				
				vec2 triStart = clamp(aabb.minPos, binStart, binEnd);
				vec2 triEnd = clamp(aabb.maxPos, binStart, binEnd);

				uvec2 triangleStartTile = clamp(uvec2((triStart - binStart) / tileSizeRelative), uvec2(0), TILE_COUNT - 1); 
				uvec2 triangleEndTile = clamp(uvec2((triEnd - binStart) / tileSizeRelative), uvec2(0), TILE_COUNT - 1); 

				uvec2 tileCount = triangleEndTile - triangleStartTile + 1;

				// Clear all tiles
				for(int y = 0; y < TILE_COUNT.y; ++y)
				{
					for(int x = 0; x < TILE_COUNT.x; ++x)
					{
						SetTriangleCoverageBit(uvec2(x, y), indexOfTriangleIndex, false);
					}
				}
				if((tileCount.x == 1 || tileCount.x == 2) && (tileCount.y == 1 || tileCount.y == 2))
				{
					for(uint y = triangleStartTile.y; y <= triangleEndTile.y; ++y)
					{
						for(uint x = triangleStartTile.x; x <= triangleEndTile.x; ++x)
						{
							SetTriangleCoverageBit(uvec2(x, y), indexOfTriangleIndex, true);
						}
					}
				}
				else
				{
					for(uint y = triangleStartTile.y; y <= triangleEndTile.y; ++y)
					{
						for(uint x = triangleStartTile.x; x <= triangleEndTile.x; ++x)
						{
							// triangle-tile test
							vec2 tileStart = binStart + tileSizeRelative * vec2(x, y);
							vec2 tileEnd = tileStart + tileSizeRelative;

							bool tileInsideTriangle = false, triangleInsideTile = false, triangleTileIntersect = false;

							tileInsideTriangle = PointInTriangle(tileStart, triangle.screenPos[0].xy, triangle.screenPos[1].xy, triangle.screenPos[2].xy);
							tileInsideTriangle = tileInsideTriangle || PointInTriangle(tileStart + vec2(tileSizeRelative.x, 0), triangle.screenPos[0].xy, triangle.screenPos[1].xy, triangle.screenPos[2].xy);
							tileInsideTriangle = tileInsideTriangle || PointInTriangle(tileStart + vec2(0, tileSizeRelative.y), triangle.screenPos[0].xy, triangle.screenPos[1].xy, triangle.screenPos[2].xy);
							tileInsideTriangle = tileInsideTriangle || PointInTriangle(tileStart + tileSizeRelative, triangle.screenPos[0].xy, triangle.screenPos[1].xy, triangle.screenPos[2].xy);
						
						
							triangleInsideTile = all(greaterThanEqual(triangle.screenPos[0].xy, tileStart)) && all(lessThanEqual(triangle.screenPos[0].xy, tileEnd)); 
							triangleInsideTile = triangleInsideTile || (all(greaterThanEqual(triangle.screenPos[1].xy, tileStart)) && all(lessThanEqual(triangle.screenPos[1].xy, tileEnd))); 
							triangleInsideTile = triangleInsideTile || (all(greaterThanEqual(triangle.screenPos[2].xy, tileStart)) && all(lessThanEqual(triangle.screenPos[2].xy, tileEnd))); 
							
							triangleTileIntersect = SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[1].xy, tileStart, tileStart + vec2(tileSizeRelative.x, 0));
							triangleTileIntersect = triangleTileIntersect || SegmentsIntersect(triangle.screenPos[1].xy, triangle.screenPos[2].xy, tileStart, tileStart + vec2(tileSizeRelative.x, 0));
							triangleTileIntersect = triangleTileIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[2].xy, tileStart, tileStart + vec2(tileSizeRelative.x, 0));
							
							triangleTileIntersect = triangleTileIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[1].xy, tileStart + vec2(tileSizeRelative.x, 0), tileStart + tileSizeRelative);
							triangleTileIntersect = triangleTileIntersect || SegmentsIntersect(triangle.screenPos[1].xy, triangle.screenPos[2].xy, tileStart + vec2(tileSizeRelative.x, 0), tileStart + tileSizeRelative);
							triangleTileIntersect = triangleTileIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[2].xy, tileStart + vec2(tileSizeRelative.x, 0), tileStart + tileSizeRelative);
							
							triangleTileIntersect = triangleTileIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[1].xy, tileStart + tileSizeRelative, tileStart + vec2(0, tileSizeRelative.y));
							triangleTileIntersect = triangleTileIntersect || SegmentsIntersect(triangle.screenPos[1].xy, triangle.screenPos[2].xy, tileStart + tileSizeRelative, tileStart + vec2(0, tileSizeRelative.y));
							triangleTileIntersect = triangleTileIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[2].xy, tileStart + tileSizeRelative, tileStart + vec2(0, tileSizeRelative.y));
							
							triangleTileIntersect = triangleTileIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[1].xy, tileStart + vec2(0, tileSizeRelative.y), tileStart);
							triangleTileIntersect = triangleTileIntersect || SegmentsIntersect(triangle.screenPos[1].xy, triangle.screenPos[2].xy, tileStart + vec2(0, tileSizeRelative.y), tileStart);
							triangleTileIntersect = triangleTileIntersect || SegmentsIntersect(triangle.screenPos[0].xy, triangle.screenPos[2].xy, tileStart + vec2(0, tileSizeRelative.y), tileStart);

							SetTriangleCoverageBit(uvec2(x, y), indexOfTriangleIndex, triangleTileIntersect || tileInsideTriangle || triangleInsideTile);
						}
					}
				}
				barrier();
				memoryBarrierShared();
				uint stages = uint(ceil(log2(min(LOCAL_SIZE_X, trianglesInBin - currentBinTriangleCounter)))); 
				for(uint y = 0; y < TILE_COUNT.y; ++y)
				for(uint x = 0; x < TILE_COUNT.x; ++x)
				{
					prefixSum[gl_LocalInvocationID.x] = int(GetTriangleCoverageBit(uvec2(x, y), gl_LocalInvocationID.x));
					barrier();
					memoryBarrierShared();
					for(int stage = 0; stage < stages; stage++)
					{
						uint readOffset = (stage & 1) * LOCAL_SIZE_X; // half of the shared memory that we will read from
						uint writeOffset = (stage + 1 & 1) * LOCAL_SIZE_X; // half of the shared memory that we will write to
						uint stride = (1 << stage); 
						bool add = gl_LocalInvocationID.x % (stride << 1) >= stride;
						uint strideId = gl_LocalInvocationID.x % stride; // ID inside stride
						uint readIndex = readOffset + gl_LocalInvocationID.x - 1 - strideId;
						uint writeIndex = writeOffset + gl_LocalInvocationID.x;
						uint oldIndex = readOffset + gl_LocalInvocationID.x;

						if(add)
						{
							prefixSum[writeIndex] = prefixSum[readIndex] + prefixSum[oldIndex];
						}
						else
						{
							prefixSum[writeIndex] = prefixSum[oldIndex];
						}
						barrier();
						memoryBarrierShared();
					}
					uint trianglesInBatch = min(LOCAL_SIZE_X, trianglesInBin - currentBinTriangleCounter);
					uint tileIndex = y * TILE_COUNT.x + x;
					uint readIndex = (stages & 1) * LOCAL_SIZE_X + gl_LocalInvocationID.x;
					uint outpIndex = prefixSum[readIndex];
					uint oldTileStartIndex = tileStartIndices[tileIndex];
					if(gl_LocalInvocationID.x == 0)
					{
						uint triCount = prefixSum[(stages & 1) * LOCAL_SIZE_X + trianglesInBatch - 1];
						tileStartIndices[tileIndex] += triCount;
					}
					barrier();
					memoryBarrierShared();
					if(GetTriangleCoverageBit(uvec2(x, y), gl_LocalInvocationID.x))
					{
						uint binOffset = currentBin == 0 ? 0 : perBinTriangleCountPrefixSum[currentBin - 1];
						uint maxTrianglesInTile = (perBinTriangleCountPrefixSum[currentBin] - binOffset);

						uint outputIndex = binOffset * TILE_COUNT_LINEAR + tileIndex * maxTrianglesInTile + oldTileStartIndex + outpIndex - 1;
						perTileTriangleIndices[outputIndex] = triangleIdx;
						//test
					}
					memoryBarrierBuffer();
				}
			}
			barrier();
			memoryBarrierShared();
			if(currentBinTriangleCounter + LOCAL_SIZE_X >= trianglesInBin && gl_LocalInvocationID.x < TILE_COUNT_LINEAR)
			{
				uvec2 localTileIdx2D = uvec2(int(gl_LocalInvocationID.x) % int(TILE_COUNT), int(gl_LocalInvocationID.x) / int(TILE_COUNT)); 
				uvec2 index2D = binIndex * TILE_COUNT + localTileIdx2D;
				//uint lin = index2D.y * TILES_IN_IMAGE.x + index2D.x;

				uint tileIndexInSSBO = index2D.y * TILES_IN_IMAGE.x + index2D.x;
				perTileTriangleCount[tileIndexInSSBO] = tileStartIndices[gl_LocalInvocationID.x];
			}
			if(gl_LocalInvocationID.xy == uvec2(0, 0))
			{
				currentBinTriangleCounter += LOCAL_SIZE_X;
			}

			barrier();
			memoryBarrierShared();
		}
		if(gl_LocalInvocationID.x == 0)
		{
			currentBin = atomicCounterIncrement(currentBinIndex);
		}
		barrier();
		memoryBarrierShared();
	}
	for(uint binY = 0; binY < BIN_COUNT.y; ++binY)
	for(uint binX = 0; binX < BIN_COUNT.x; ++binX)
	{
	uint binIndex = binY * BIN_COUNT.x + binX;
	vec2 binStart = (vec2(binX, binY) / vec2(BIN_COUNT) - 0.5) * 2;
	vec2 binEnd = binStart + binSizeRelative;	
	for(uint y = 0; y < TILE_COUNT.y; ++y)
	for(uint x = 0; x < TILE_COUNT.x; ++x)
	{
		uint triCount = atomicCounter(triangleCount) + atomicCounter(snappedTriangleCount);

		uint tileIndex = y * TILE_COUNT.x + x;


		uvec2 p = uvec2(binX, binY) * TILE_COUNT + uvec2(x, y);
		uint lin = p.y * TILES_IN_IMAGE.x + p.x;


		uint tileIndexInSSBO = lin;
		float outp = float(lin) / float(16384);
		uvec2 tileStart = uvec2(((binStart + vec2(x, y) * tileSizeRelative) * 0.5 + 0.5) * IMAGE_SIZE);
		uvec2 tileEnd = uvec2(((binStart + vec2(x + 1, y + 1) * tileSizeRelative) * 0.5 + 0.5) * IMAGE_SIZE);
		for(uint i = tileStart.x; i <= tileEnd.x; i++)
		{
			for(uint j = tileStart.y; j <= tileEnd.y; j++)
			{
				uint binOffset = binIndex == 0 ? 0 : perBinTriangleCountPrefixSum[binIndex - 1];
				uint maxTrianglesInTile = (perBinTriangleCountPrefixSum[binIndex] - binOffset);

				uint trisInTile = perTileTriangleCount[tileIndexInSSBO];

				uint outputIndex = (binOffset * TILE_COUNT_LINEAR ) + tileIndex* maxTrianglesInTile;
				if(perTileTriangleCount[tileIndexInSSBO] == 1)
				{
					if(perTileTriangleIndices[outputIndex] == 0)
					{
						imageStore(testTex, ivec2(i, j), vec4(0, 1, 0, 1));
					}
					else if(perTileTriangleIndices[outputIndex] == 1)
					{
						imageStore(testTex, ivec2(i, j), vec4(0, 0, 1, 1));
					}
				}
				else if(perTileTriangleCount[tileIndexInSSBO] == 2)
				{
					{
						imageStore(testTex, ivec2(i, j), vec4(0, 1, 1, 1));
					}
					
				}
				else if(perTileTriangleCount[tileIndexInSSBO] > 2)
				{
					if(perTileTriangleIndices[outputIndex] != perTileTriangleIndices[outputIndex + 1])
					{
						imageStore(testTex, ivec2(i, j), vec4(trisInTile, 0, 0, 1));
					}
					
				}
			}
		}
	}
	}
}

//TODO: Duplicate
void GetTriangle2DAABB(in vec4 screenPos[3], out AABB2D aabb)
{
	vec4 minV = vec4(min(min(screenPos[0], screenPos[1]), screenPos[2]));
	vec4 maxV = vec4(max(max(screenPos[0], screenPos[1]), screenPos[2]));
	aabb.minPos = minV.xy;
	aabb.maxPos = maxV.xy;
}

void SetTriangleCoverageBit(uvec2 tile, uint triangleId, bool overlaps)
{
	triangleId %= LOCAL_SIZE_X;
	uint tileIdx = TILE_COUNT.x * tile.y + tile.x;
	uint triStartIndex = triangleId * SHARED_MEMORY_INVOCATION_STRIDE;
	uint tileOffset = tileIdx / 32;
	uint bitOffset = tileIdx % 32;

	coarseRasterizerIntermadiatedData[triStartIndex + tileOffset] ^= (-int(overlaps) ^ coarseRasterizerIntermadiatedData[triStartIndex + tileOffset]) & (1 << bitOffset);
}
bool GetTriangleCoverageBit(uvec2 tile, uint triangleId)
{
	triangleId %= LOCAL_SIZE_X;
	uint tileIdx = TILE_COUNT.x * tile.y + tile.x;
	uint triStartIndex = triangleId * SHARED_MEMORY_INVOCATION_STRIDE;
	uint tileOffset = tileIdx / 32;
	uint bitOffset = tileIdx % 32;

	return bool(coarseRasterizerIntermadiatedData[triStartIndex + tileOffset] & (1 << bitOffset));
}

// TODO: Duplicate
float EdgeFunction(in vec2 p1, in vec2 p2, in vec2 test_point)
{
	return (test_point.x - p1.x) * (p2.y - p1.y) - (test_point.y - p1.y) * (p2.x - p1.x);
}

vec2 Perpendicular(in vec2 vec)
{
	vec2 res; 
	if(abs(vec.x) < 1e-5 || abs(vec.y) < 1e-5)
		res = vec2(vec.y, vec.x);
	else
	{
		res.y = 1;
		res.x = -vec.y * res.y / vec.x;
	}
	return normalize(res);
}

bool PointInTriangle(vec2 point, vec2 v1, vec2 v2, vec2 v3)
{
	float d1 = EdgeFunction(v1, v2, point);
	float d2 = EdgeFunction(v2, v3, point);
	float d3 = EdgeFunction(v3, v1, point);

	return d1 > 0 && d2 > 0 && d3 > 0;
}

bool SegmentsIntersect(vec2 A, vec2 B, vec2 C, vec2 D)
{
	vec2 O1 = A;
	vec2 O2 = C;
	vec2 D1  = B - A;
	vec2 D2 = D - C;
	vec2 D1Perp = Perpendicular(D1);
	vec2 D2Perp = Perpendicular(D2);
	float s = dot(O2 - O1, D2Perp) / dot(D1, D2Perp);
	float t = dot(O1 - O2, D1Perp) / dot(D2, D1Perp);
	return s >= 0 && s <= 1 && t >= 0 && t <= 1;
}