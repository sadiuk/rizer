#version 460 core


#define LOCAL_SIZE_X 64
layout(local_size_x = LOCAL_SIZE_X) in;

#define IMAGE_SIZE uvec2(1024, 1024)
#define BIN_COUNT uvec2(16, 16)
#define BIN_COUNT_LINEAR int(int(BIN_COUNT.x) * int(BIN_COUNT.y))
#define TILES_IN_BIN uvec2(8, 8)
#define TILES_IN_BIN_LINEAR int(TILES_IN_BIN.x) * int(TILES_IN_BIN.y)
#define TILES_IN_IMAGE uvec2(BIN_COUNT * TILES_IN_BIN)
#define TILES_IN_IMAGE_LINEAR int(int(BIN_COUNT_LINEAR) * int(TILES_IN_BIN_LINEAR))
#define PIXELS_IN_TILE uvec2(IMAGE_SIZE / BIN_COUNT / TILES_IN_BIN)
#define PIXELS_IN_TILE_LINEAR int(PIXELS_IN_TILE.x * PIXELS_IN_TILE.y)
#define COLOR_BUFFER_OCCUPANCE_SIZE (PIXELS_IN_TILE_LINEAR / 32)
//TODO: proper ring buffer size
#define RING_BUFFER_SIZE (LOCAL_SIZE_X * 4)

struct SetupTriangleData
{
	vec4 screenPos[3];
};

struct AABB2D
{
	vec2 minPos, maxPos;
};

layout(std430, binding = 0) readonly buffer TriangleData
{
	SetupTriangleData triangles[];
};

layout(std430, binding = 1) readonly buffer SnappedTriangleData
{
	SetupTriangleData snappedTriangles[];
};

layout(binding = 2, offset = 0) uniform atomic_uint currentTileCounter;

layout(binding = 3, rgba8) uniform image2D outTex;

layout(std430, binding = 4) buffer PerTileTriangleCount
{
	uint perTileTriangleCount[];
};
// A prefix sum of (the max triangle capacity for each bin) * (number of tiles in a bin)
layout(std430, binding = 5) buffer PerBinTriangleCountPrefixSum
{
	uint perBinTriangleCountPrefixSum[];
};

layout(std430, binding = 6) buffer PerTileIndices
{
	uint perTileTriangleIndices[];
};

//TODO: Put into UBO
const vec4 clearColor = vec4(0, 0, 0, 0);

shared uint currentTile;
shared uint processedTriangles;
shared uvec2 ringBufferRange;
shared uvec2 ringBuffer[RING_BUFFER_SIZE];

shared bool shadingStage;

//	Bitfield
shared uint colorBufferOccupance[COLOR_BUFFER_OCCUPANCE_SIZE];

shared vec4 colorBuffer[PIXELS_IN_TILE_LINEAR];
shared float depthBuffer[PIXELS_IN_TILE_LINEAR];

float EdgeFunction(in vec2 p1, in vec2 p2, in vec2 test_point);	
bool PointInTriangle(vec2 point, vec2 v1, vec2 v2, vec2 v3);

bool OccupyPixel(uint indexLinear);
void DeoccupyPixel(uint indexLinear);

const vec2 binSize = IMAGE_SIZE / BIN_COUNT;
const vec2 binSizeRelative = vec2(2.0, 2.0) / vec2(BIN_COUNT);
const vec2 tileSize = IMAGE_SIZE / TILES_IN_IMAGE;
const vec2 tileSizeRelative = vec2(1.) / TILES_IN_IMAGE;
const vec2 pixelSizeRelative = vec2(1) / IMAGE_SIZE;
const vec2 pixelHalfSizeRelative = pixelSizeRelative * 0.5;
uint debugFloat(float v)
{
	return uint(abs(v) * 100 + 100 * int(v > 0));
}
uvec2 getTileIndex(uvec2 pix)
{
	return pix / 8;
}
uvec2 getPixIndex(uvec2 pix)
{
	return pix % 8;
}
void main()
{
	if(gl_LocalInvocationID.x == 0)
	{
		currentTile = atomicCounterIncrement(currentTileCounter);
		ringBufferRange = uvec2(0, 0);
		shadingStage = false;
	}
	barrier();
	memoryBarrierShared();
	
	while(currentTile < TILES_IN_IMAGE_LINEAR)
	{
		if(gl_LocalInvocationID.x == 0)
		{
			processedTriangles = 0;
			ringBufferRange = uvec2(0, 0);
			shadingStage = false;
		}
		// TODO: if clear!!
		if(gl_LocalInvocationID.x < PIXELS_IN_TILE_LINEAR)
		{
			colorBuffer[gl_LocalInvocationID.x] = clearColor;
		}
		if(gl_LocalInvocationID.x < COLOR_BUFFER_OCCUPANCE_SIZE)
		{
			colorBufferOccupance[gl_LocalInvocationID.x] = 0;
		}
		barrier();
		memoryBarrierShared();
		uvec2 tileIndex = uvec2(currentTile % int(TILES_IN_IMAGE.x), currentTile / int(TILES_IN_IMAGE.x)); 
		uvec2 tileInBin = tileIndex % TILES_IN_BIN;
		uint tileInBinLin = tileInBin.y * TILES_IN_BIN.x + tileInBin.x;
		uvec2 binIndex = tileIndex / TILES_IN_BIN;
		uint currentBin = binIndex.y * BIN_COUNT.x + binIndex.x;
		vec2 tileStart = tileIndex * tileSizeRelative; 
		
		
		

		uint trisInTile = perTileTriangleCount[currentTile];

		int k = 0;				
		

		while(processedTriangles < trisInTile)
		{
			uint indexOfTriangleIndex = processedTriangles + gl_LocalInvocationID.x;

			if(indexOfTriangleIndex < trisInTile)
			{
				uint binOffset = currentBin == 0 ? 0 : perBinTriangleCountPrefixSum[currentBin - 1];
				uint maxTrianglesInTile = (perBinTriangleCountPrefixSum[currentBin] - binOffset);
				uint indexOfTriangleIndexInSSBO = binOffset * TILES_IN_BIN_LINEAR + tileInBinLin * maxTrianglesInTile + indexOfTriangleIndex;
				
				uint triangleIdx = perTileTriangleIndices[indexOfTriangleIndexInSSBO];
				SetupTriangleData triangle = triangles[triangleIdx];
				
				// TODO: triangle coverage calculation
				// TODO: might have a fancy coverage test from the paper but for now we'll have this
				// TODO: detect ovelflows!!!!!
				uint i = 0;
				for(uint y = 0; y < uint(PIXELS_IN_TILE.y); ++y)
				{
					for(uint x = 0; x < uint(PIXELS_IN_TILE.x); ++x)
					{
						vec2 pixelCenterCoord = (tileStart + vec2(x, y) * pixelSizeRelative + pixelHalfSizeRelative - 0.5) * 2;
						uvec2 coord = tileIndex * PIXELS_IN_TILE + uvec2(x, y);
						
						bool inside = PointInTriangle(pixelCenterCoord, triangle.screenPos[0].xy, triangle.screenPos[1].xy, triangle.screenPos[2].xy);
						
						if(inside)
						{
							uint end = atomicAdd(ringBufferRange.y, 1);
							uint fragIdx = y * uint(PIXELS_IN_TILE.x) + x;
							ringBuffer[end % RING_BUFFER_SIZE] = uvec2(triangleIdx, fragIdx);
						}
						i++;
					}
				}
			}
			barrier();
			memoryBarrierShared();	


			if(gl_LocalInvocationID.x == 0)
			{
				if(!shadingStage) processedTriangles += LOCAL_SIZE_X;
				shadingStage = ringBufferRange[1] - ringBufferRange[0] >= LOCAL_SIZE_X || processedTriangles > trisInTile;
			}
			barrier();
			memoryBarrierShared();
			
			if(shadingStage)
			{
				// TODO: test if we're not gonna be 1 fragment short
				uint fragIndex = atomicAdd(ringBufferRange[0], 1);
				uint i = 0;
				if(fragIndex >= ringBufferRange[1])
				{
					atomicAdd(ringBufferRange[0], -1);
				}				
				while(int(ringBufferRange[1]) - int(fragIndex) > 0)
				{
					uvec2 fragment = ringBuffer[fragIndex % RING_BUFFER_SIZE];
					uvec2 pixIndex = tileIndex * PIXELS_IN_TILE + uvec2(fragment[1] % PIXELS_IN_TILE.x, fragment[1] / PIXELS_IN_TILE.x);

					if(OccupyPixel(fragment[1]))
					{
						if(colorBuffer[fragment[1]] == vec4(0))
						{
							if(fragment[0] == 0)
							colorBuffer[fragment[1]] = vec4(0, 1, 0, 1);
							else if(fragment[0] == 1)
							colorBuffer[fragment[1]] = vec4(0, 0, 1, 1);

						}
						else
						{
							
							colorBuffer[fragment[1]] = vec4(0, 1, 1, 1);
							
						}	
						DeoccupyPixel(fragment[1]);
					}
					else
					{
						uint end = atomicAdd(ringBufferRange[1], 1);
						ringBuffer[end % RING_BUFFER_SIZE] = fragment;
					}
					fragIndex = atomicAdd(ringBufferRange[0], 1);
					if(fragIndex >= ringBufferRange[1])
					{
						atomicAdd(ringBufferRange[0], -1);
					}
					i++;
				}

				shadingStage = false;
			}
		}
		barrier();
		memoryBarrierShared();
		if(gl_LocalInvocationID.x < PIXELS_IN_TILE_LINEAR)
		{
			ivec2 pixInTile = ivec2(int(gl_LocalInvocationID.x) % int(PIXELS_IN_TILE.x), int(gl_LocalInvocationID.x) / int(PIXELS_IN_TILE.x));
			uint pixInTileLin = pixInTile.y * PIXELS_IN_TILE.x + pixInTile.x;
			ivec2 texelPos = ivec2(tileIndex * PIXELS_IN_TILE + pixInTile); 
			imageStore(outTex, texelPos, colorBuffer[pixInTileLin]);
			//if(tileIndex == getTileIndex(uvec2(108, 569))) perTileTriangleIndices[gl_LocalInvocationID.x] = currentTile;
		}
		if(gl_LocalInvocationID.x == 0)
		{
			currentTile = atomicCounterIncrement(currentTileCounter);
		}
		barrier();
		memoryBarrierShared();
	}
}

float EdgeFunction(in vec2 p1, in vec2 p2, in vec2 test_point)
{
	return (test_point.x - p1.x) * (p2.y - p1.y) - (test_point.y - p1.y) * (p2.x - p1.x);
}

bool PointInTriangle(vec2 point, vec2 v1, vec2 v2, vec2 v3)
{
	float d1 = EdgeFunction(v1, v2, point);
	float d2 = EdgeFunction(v2, v3, point);
	float d3 = EdgeFunction(v3, v1, point);

	return d1 > 0. && d2 > 0. && d3 > 0.;
}

bool OccupyPixel(uint indexLinear)
{
	uint elIndex = indexLinear / 32;
	uint innerIndex = indexLinear % 32;
	uint res;
	uint i = 1 << innerIndex;
	res = atomicOr(colorBufferOccupance[elIndex], i);
	return !bool(res & i);
}
void DeoccupyPixel(uint indexLinear)
{
	uint elIndex = indexLinear / 32;
	uint innerIndex = indexLinear % 32;
	atomicAnd(colorBufferOccupance[elIndex], ~(1 << innerIndex));
}